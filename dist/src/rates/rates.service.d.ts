import { Model } from 'mongoose';
import { Fabric, FabricDocument } from '../schemas/fabric';
import { Item, ItemDocument } from '../schemas/items';
import { Shipping, ShippingDocument } from '../schemas/shipping';
import { Print, PrintDocument } from '../schemas/printing';
import { Embroidery, EmbroideryDocument } from 'src/schemas/embroidery';
export declare class RatesService {
    private fabricModel;
    private itemModel;
    private shippingModel;
    private printingModel;
    private embroideryModel;
    constructor(fabricModel: Model<FabricDocument>, itemModel: Model<ItemDocument>, shippingModel: Model<ShippingDocument>, printingModel: Model<PrintDocument>, embroideryModel: Model<EmbroideryDocument>);
    createFabric(Fabric: Fabric): Promise<Fabric>;
    readAllFabric(): Promise<Fabric[]>;
    findSingleMaterial(material: any): Promise<Fabric>;
    findSingleItem(name: any): Promise<Item>;
    findSingleShipping(name: any): Promise<Shipping>;
    updateFabric(id: any, fabric: Fabric): Promise<Fabric>;
    deleteFabric(id: any): Promise<any>;
    findSinglePrinting(name: any): Promise<Print>;
    findSingleEmbroidery(name: any): Promise<Embroidery>;
    readAllItems(): Promise<Item[]>;
    deleteItem(id: any): Promise<any>;
    deleteShipping(id: any): Promise<any>;
    deletePrinting(id: any): Promise<any>;
    deleteEmbroidery(id: any): Promise<any>;
    createItem(Item: Item): Promise<Item>;
    updateItem(id: any, item: Item): Promise<Item>;
    readAllShipping(): Promise<Shipping[]>;
    readAllPrinting(): Promise<Print[]>;
    readAllEmbroidery(): Promise<Embroidery[]>;
    createShipping(Shipping: Shipping): Promise<Shipping>;
    updateShipping(id: any, shipping: Shipping): Promise<Shipping>;
    updatePrinting(id: any, printing: Print): Promise<Print>;
    updateEmbroidery(id: any, embroidery: Embroidery): Promise<Embroidery>;
    createPrinting(Print: Print): Promise<Print>;
    createEmbroidery(Embroidery: Embroidery): Promise<Embroidery>;
    calculatePrice(item: any): Promise<any>;
}
